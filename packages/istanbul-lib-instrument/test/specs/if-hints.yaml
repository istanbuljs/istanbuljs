---
name: ignore else
code: |
  output = -1;
  /* istanbul ignore else */
  if (args[0] > args [1])
     output = args[0];
tests:
  - args: [20, 10]
    out: 20
    lines: {'1': 1, '3': 1, '4': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1, '2': 1}

---
name: ignore if
code: |
  output = -1;
  /* istanbul ignore if */
  if (args[0] > args [1])
     output = args[0];
tests:
  - args: [10, 20]
    out: -1
    lines: {'1': 1, '3': 1 }
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1 }

---
name: ignore else with if block
code: |
  output = -1;
  /* istanbul ignore else */
  if (args[0] > args [1]) {
     output = args[0];
  }
tests:
  - args: [20, 10]
    out: 20
    lines: {'1': 1, '3': 1, '4': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1, '2': 1}

---
name: ignore if with if block
code: |
  output = -1;
  /* istanbul ignore if */
  if (args[0] > args [1]) {
     output = args[0];
  }
tests:
  - args: [10, 20]
    out: -1
    lines: {'1': 1, '3': 1 }
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1 }

---
name: ignore else single line
code: |
  output = -1;
  /* istanbul ignore else */
  if (args[0] > args [1]) output = args[0];
tests:
  - args: [20, 10]
    out: 20
    lines: {'1': 1, '3': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1, '2': 1}

---
name: ignore if single line
code: |
  output = -1;
  /* istanbul ignore if */
  if (args[0] > args [1]) output = args[0];
tests:
  - args: [10, 20]
    out: -1
    lines: {'1': 1, '3': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1 }

---
name: ignore else if-block
code: |
  output = -1;
  /* istanbul ignore else */
  if (args[0] > args [1]) { output = args[0]; }
tests:
  - args: [20, 10]
    out: 20
    lines: {'1': 1, '3': 1}
    branches: {'0': [1] }
    statements: {'0': 1, '1': 1, '2': 1}

---
name: ignore if block
code: |
  output = -1;
  /* istanbul ignore if */
  if (args[0] > args [1]) { output = args[0]; }
tests:
  - args: [10, 20]
    out: -1
    lines: {'1': 1, '3': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1}
    branchSkips: { '0': [ true, false ]}
    statementSkips: { '2': true }

---
name: ignore using next
code: |
  output = -1;
  /* istanbul ignore next */
  if (args[0] > args [1]) { output = args[0]; }
tests:
  - args: [10, 20]
    out: -1
    lines: {'1': 1}
    branches: {}
    statements: {'0': 1 }

---
name: ignore else using single line comment
code: |
  // istanbul ignore else
  if (args[0] > args [1])
     output = args[0];
  else
     output = args[1];
tests:
  - args: [20, 10]
    out: 20
    lines: {'2': 1, '3': 1 }
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1 }

---
name: ignore if using single line comment
code: |
  // istanbul ignore if
  if (args[0] > args [1])
     output = args[0];
  else
     output = args[1];
tests:
  - args: [10, 20]
    out: 20
    lines: {'2': 1, '5': 1}
    branches: {'0': [1]}
    statements: {'0': 1, '1': 1, }
---
name: ignore chained if
code: |
  if (args[0] === 1) {
    output = '1';
  } else /* istanbul ignore if */ if (args[0] === 2) {
    output = '2';
  } else {
    output = 'other';
  }
tests:
  - name: '1'
    args: [1]
    out: '1'
    lines: {'1': 1, '2': 1, '3': 0, '6': 0}
    branches: {'0': [1, 0], 1: [0]}
    statements: {'0': 1, '1': 1, '2': 0, '3': 0}
  - name: '2'
    args: [2]
    out: '2'
    lines: {'1': 1, '2': 0, '3': 1, '6': 0}
    branches: {'0': [0, 1], 1: [0]}
    statements: {'0': 1, '1': 0, '2': 1, '3': 0}
  - name: '3'
    args: [3]
    out: 'other'
    lines: {'1': 1, '2': 0, '3': 1, '6': 1}
    branches: {'0': [0, 1], 1: [1]}
    statements: {'0': 1, '1': 0, '2': 1, '3': 1}
---
name: ignore chained else
code: |
  if (args[0] === 1) {
    output = '1';
  } /* istanbul ignore else */ else if (args[0] === 2) {
    output = '2';
  } else if (args[0] === 3) {
    output = '3';
  } else {
    output = 'other';
  }
tests:
  - name: '1'
    args: [1]
    out: '1'
    lines: {'1': 1, '2': 1, '3': 0, '4': 0}
    branches: {'0': [1, 0], 1: [0]}
    statements: {'0': 1, '1': 1, '2': 0, '3': 0}
  - name: '2'
    args: [2]
    out: '2'
    lines: {'1': 1, '2': 0, '3': 1, '4': 1}
    branches: {'0': [0, 1], 1: [1]}
    statements: {'0': 1, '1': 0, '2': 1, '3': 1}
  - name: '3'
    args: [3]
    out: '3'
    lines: {'1': 1, '2': 0, '3': 1, '4': 0}
    branches: {'0': [0, 1], 1: [0]}
    statements: {'0': 1, '1': 0, '2': 1, '3': 0}
  - name: '4'
    args: [4]
    out: 'other'
    lines: {'1': 1, '2': 0, '3': 1, '4': 0}
    branches: {'0': [0, 1], 1: [0]}
    statements: {'0': 1, '1': 0, '2': 1, '3': 0}
---
name: ignore next chained if
code: |
  if (args[0] === 1) {
    output = '1';
  } else /* istanbul ignore next */ if (args[0] === 2) {
    output = '2';
  } else if (args[0] === 3) {
    output = '3';
  } else {
    output = 'other';
  }
tests:
  - name: '1'
    args: [1]
    out: '1'
    lines: {'1': 1, '2': 1}
    branches: {'0': [1, 0]}
    statements: {'0': 1, '1': 1}
  - name: '2'
    args: [2]
    out: '2'
    lines: {'1': 1, '2': 0}
    branches: {'0': [0, 1]}
    statements: {'0': 1, '1': 0}
  - name: '3'
    args: [3]
    out: '3'
    lines: {'1': 1, '2': 0}
    branches: {'0': [0, 1]}
    statements: {'0': 1, '1': 0}
  - name: '4'
    args: [4]
    out: 'other'
    lines: {'1': 1, '2': 0}
    branches: {'0': [0, 1]}
    statements: {'0': 1, '1': 0}
