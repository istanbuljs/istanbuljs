// The index file for the spa running on the summary page
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import SummaryTableHeader from './summaryTableHeader';
import SummaryTableLine from './summaryTableLine';
import SummaryHeader from './summaryHeader';
import getChildData from './getChildData';
import SummarizerButtons from './summarizerButtons';
import FilterButtons from './filterButtons';
import { setLocation, decodeLocation } from './routing';

const sourceData = window.data;
let firstMount = true;

function App() {
    const routingDefaults = decodeLocation();

    const [activeSort, setSort] = React.useState(
        (routingDefaults && routingDefaults.activeSort) || {
            sortKey: 'file',
            order: 'asc'
        }
    );
    const [summarizerType, setSummarizerType] = React.useState(
        (routingDefaults && routingDefaults.summarizerType) || 'package'
    );
    const [activeFilters, setFilters] = React.useState(
        (routingDefaults && routingDefaults.activeFilters) || {
            low: true,
            medium: true,
            high: true
        }
    );
    const childData = React.useMemo(
        () =>
            getChildData(sourceData, activeSort, summarizerType, activeFilters),
        [activeSort, summarizerType, activeFilters]
    );
    const overallMetrics = sourceData.package.metrics;

    React.useEffect(() => {
        setLocation(firstMount, activeSort, summarizerType, activeFilters);
        firstMount = false;
    }, [activeSort, summarizerType, activeFilters]);

    React.useEffect(() => {
        window.onpopstate = () => {
            const routingState = decodeLocation();
            if (routingState) {
                setFilters(routingState.activeFilters);
                setSort(routingState.activeSort);
                setSummarizerType(routingState.summarizerType);
            }
        };
    }, []);

    return (
        <>
            <div class="wrapper">
                <SummaryHeader metrics={overallMetrics} />
                <div class="pad1">
                    <SummarizerButtons
                        setSummarizerType={setSummarizerType}
                        summarizerType={summarizerType}
                    />
                    <FilterButtons
                        activeFilters={activeFilters}
                        setFilters={setFilters}
                    />
                </div>
                <div class="pad1">
                    <table class="coverage-summary">
                        <SummaryTableHeader
                            onSort={newSort => {
                                setSort(newSort);
                            }}
                            activeSort={activeSort}
                        />
                        <tbody>
                            {childData.map(child => (
                                <SummaryTableLine {...child} key={child.file} />
                            ))}
                        </tbody>
                    </table>
                </div>
                <div class="push" />
                {/* for sticky footer */}
            </div>
            <div class="footer quiet pad2 space-top1 center small">
                Code coverage generated by{' '}
                <a href="https://istanbul.js.org/" target="_blank">
                    istanbul
                </a>{' '}
                at {window.generatedDatetime}
            </div>
        </>
    );
}

ReactDOM.render(<App />, document.getElementById('app'));
